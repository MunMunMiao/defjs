import { writeFileSync } from 'node:fs'
import { Command } from 'commander'
import { EmitHint, ListFormat, NewLineKind, NodeFlags, SyntaxKind, createPrinter, factory, version } from 'typescript'
import { createImport } from './import'
import { createDefineRequest } from './request'

export let program = new Command()

program = program.name('openapi')
program = program.description('OpenAPI helper')
program = program.version('0.8.0')

program = program.option('-f, --from <string>', 'Path to the OpenAPI file')
program.action(() => {
  console.log(`Typescript version: ${version}`)

  const importDeclaration = createImport({
    moduleName: '@defjs/core',
    imports: [
      { name: 'defineRequest', isTypeOnly: false },
      { name: 'field', isTypeOnly: false },
    ],
  })

  const exportDeclaration = createDefineRequest({
    name: 'useGetUser',
    method: 'POST',
    url: '/v1/cart',
    withFieldGroup: {
      id: {
        types: ['number'],
        defaultValue: '10',
        withQuery: {
          enable: true,
        },
        withJson: {
          enable: true,
          alias: 'uid',
        },
      },
      name: {
        types: ['string'],
        defaultValue: '',
        withQuery: {
          enable: true,
        },
        withJson: {
          enable: true,
          alias: 'uid',
        },
      },
    },
  })

  const sourceFile = factory.createSourceFile([importDeclaration], factory.createToken(SyntaxKind.EndOfFileToken), NodeFlags.None)

  const printer = createPrinter({ newLine: NewLineKind.LineFeed })
  // printer.printNode(EmitHint.Unspecified, importDeclaration, sourceFile)
  // printer.printNode(EmitHint.EmbeddedStatement, factory.createJSDocText('dadadsadads'), sourceFile)
  // printer.printNode(EmitHint.Unspecified, exportDeclaration, sourceFile)
  const nodes = [exportDeclaration, exportDeclaration, exportDeclaration]
  let re = ''
  re += '// DO NOT EDIT.\n'
  re += '// Code generated by @defjs/cli v1.34.1\n'
  re += '// source: service/iam/iam.proto\n\n'

  re += printer.printNode(EmitHint.Unspecified, importDeclaration, sourceFile)
  re += '\n\n'

  for (const node of nodes) {
    re += printer.printList(ListFormat.MultiLine, node, sourceFile)
    re += '\n'
  }

  // const result = printer.printFile(sourceFile)
  writeFileSync('useUpdateProject.ts', re)

  console.log('useUpdateProject.ts')
})
